<?xml version="1.0"?>
<!--
 * Copyright 2011 Nube Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
-->
<project name="crux" default="deploy" basedir=".">

	<description>
	</description>

	<property file="build.properties" />
	
	<path id="cobertura.classpath">
		  <fileset dir="${lib.source.home}" />
			<fileset dir="${lib.test.home}" />
		</path>
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<!-- ==================== Clean Target ==================================== -->

	<!-- The "clean" target deletes any previous "build" and "deploy" directory, 
		so that you can be ensured the application can be built from scratch. -->
	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${deploy.home}" />
		<delete dir="${build.home}" />
        <delete dir="./target" />
	</target>

	<!-- ==================== Compile src Target ================================== -->

	<!-- The "compile_src" target transforms source files (from your "src" directory) 
		into class files in the appropriate location in the build directory. -->
	<target name="compile_src" depends="clean" description="Compile Java sources">
		<mkdir dir="${build.home}/WEB-INF/classes" />
		<javac srcdir="${source.home}" destdir="${build.home}/WEB-INF/classes" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" includeantruntime="false" source="1.6" target="1.6">
			<classpath>
				<path>
					<fileset dir="${lib.source.home}" />
				</path>
			</classpath>
		</javac>
	</target>


	<!-- ==================== Build Target ================================== -->

	<!-- The "build" target copies all non class files to build directory -->

	<target name="build" depends="compile_test" description="Copies all non Java classes to build directoy">
		<copy todir="${build.home}">
			<fileset dir="${webapp.home}" excludes="**/*.class" />
		</copy>
		<copy todir="${build.home}/WEB-INF/classes">
			<fileset dir="${source.home}" excludes="**/*.java" />
		</copy>
	</target>

	<!-- ==================== Deploy Target ================================== -->

	<!-- The "deploy" target create a binary archive of all files in build.home -->

	<target name="deploy" depends="jar" description="Create binary archive of all files in deploy.home">
		<mkdir dir="${deploy.home}" />
		
		<copy file="${db.home}/schema.sql" todir="${deploy.home}"/>
		<copy file="./LICENSE.txt" todir="${deploy.home}"/>
		<copy file="./NOTICE.txt" todir="${deploy.home}"/>
		<jar jarfile="${deploy.home}/${app.name}.war" basedir="${build.home}" excludes="**/Test*.class" />
		
		<zip destfile="${deploy.home}/${app.name}-${app.version}.zip"  basedir="${deploy.home}" includes="*" />
		
		<delete file="${deploy.home}/${app.name}.war"/>
		<delete file="${deploy.home}/${app.name}-${app.version}.jar"/>
		<delete file="${deploy.home}/schema.sql"/>
		<delete file="${deploy.home}/LICENSE.txt"/>
		<delete file="${deploy.home}/NOTICE.txt"/>
	</target>
	
	
	<!-- ==================== Jar Target ================================== -->	
	
	<target name="jar" depends="build" description="Create binary archive of all files in deploy.home">
			<mkdir dir="${deploy.home}" />
			<!-- Create application JAR file -->
			<jar jarfile="${deploy.home}/${app.name}-${app.version}.jar" basedir="${build.home}/WEB-INF/classes" includes="**/*.class" excludes="**/Test*.class" />
	</target>

	<!-- ==================== Compile test Target ================================== -->

	<!-- The "compile_test" target transforms test files (from your "test" directory) 
		into class files in the appropriate location in the build directory. -->
	<target name="compile_test" depends="compile_src" description="Compile Java test">
		<mkdir dir="${build.home}/WEB-INF/classes" />
		<javac srcdir="${test.home}" destdir="${build.home}/WEB-INF/classes" includeantruntime="false" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" source="1.6" target="1.6">
			<classpath>
				<path>
					<fileset dir="${lib.source.home}" />
					<fileset dir="${lib.test.home}" />
				</path>
			</classpath>
		</javac>
	</target>

	<!-- ==================== Run JUnits test Target ================================== -->

	<target name="test" depends="build">
		<junit fork="yes" haltonfailure="yes">
			<classpath>
				<path>
					<fileset dir="${lib.source.home}" />
					<fileset dir="${lib.test.home}" />
					<fileset dir="${lib.test.runTime.home}" />
					<pathelement location="${build.home}/WEB-INF/classes" />
				</path>
			</classpath>
			<formatter type="plain" usefile="false" />
			<batchtest>
				<fileset dir="${build.home}/WEB-INF/classes" includes="**/Test*.class" />
			</batchtest>
		</junit>
	</target>

	<!-- ====================For Cobertura Instrument Target ================================== -->
		<target name="instrument" depends="build">
		<mkdir dir="${deploy.home}/instrumented-classes" />
		  <cobertura-instrument todir="${deploy.home}/instrumented-classes">
		    <fileset dir="${build.home}/WEB-INF/classes">
		      <include name="**/*.class"/>
		    </fileset>
		  </cobertura-instrument>
		</target>
		
		<!-- ==================== Run cobertura-test Target ================================== -->

		<target name="cobertura-test" depends="instrument">
			<junit fork="yes" haltonfailure="yes">
				 <classpath location="${lib.test.home}/cobertura.jar"/>
				 <classpath location="${deploy.home}/instrumented-classes"/>
				<classpath>
					<path>
						<fileset dir="${lib.source.home}" />
						<fileset dir="${lib.test.home}" />
						<fileset dir="${lib.test.runTime.home}" />
						<pathelement location="${build.home}/WEB-INF/classes" />
					</path>
				</classpath>
				<formatter type="plain" usefile="false" />
				<batchtest>
					<fileset dir="${build.home}/WEB-INF/classes" includes="**/Test*.class" />
				</batchtest>
			</junit>
		</target>
	<!-- ==================== Run crux-report Target ================================== -->
	<target name="crux-report" depends="cobertura-test">
		<mkdir dir="${deploy.home}/cobertura" />
	 <cobertura-report srcdir="${source.home}" destdir="${deploy.home}/cobertura"/>
	</target>
	
	<!-- ==================== checkstyle ================================== -->
	<!--	<checkstyle config="sun_checks.xml">
			<fileset dir="${source.home}"/>
	</checkstyle> -->


</project>
